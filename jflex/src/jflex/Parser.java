
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 13 08:36:56 BRT 2017
//----------------------------------------------------

package jflex;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 13 08:36:56 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\013\004\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\002\006\000\002\002\006\000\002" +
    "\002\006\000\002\002\006\000\002\002\006\000\002\002" +
    "\006\000\002\011\012\000\002\011\012\000\002\011\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\014\004\017\011\005\012\014\015\007\022" +
    "\006\001\002\000\020\002\ufffe\004\ufffe\011\ufffe\012\ufffe" +
    "\015\ufffe\022\ufffe\023\ufffe\001\002\000\034\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\011\ufff8\012\ufff8\015\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\026\ufff8\001\002\000" +
    "\034\002\ufff6\004\ufff6\005\ufff6\006\ufff6\011\ufff6\012\ufff6" +
    "\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\026" +
    "\ufff6\001\002\000\004\026\060\001\002\000\020\002\ufffb" +
    "\004\ufffb\011\ufffb\012\ufffb\015\ufffb\022\ufffb\023\ufffb\001" +
    "\002\000\012\006\037\017\036\020\035\021\040\001\002" +
    "\000\020\002\ufffd\004\ufffd\011\ufffd\012\ufffd\015\ufffd\022" +
    "\ufffd\023\ufffd\001\002\000\020\002\ufff9\004\ufff9\011\ufff9" +
    "\012\ufff9\015\ufff9\022\ufff9\023\ufff9\001\002\000\034\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7\015\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\026\ufff7\001" +
    "\002\000\016\002\056\004\017\011\005\012\014\015\007" +
    "\022\006\001\002\000\020\002\ufffc\004\ufffc\011\ufffc\012" +
    "\ufffc\015\ufffc\022\ufffc\023\ufffc\001\002\000\014\006\ufff5" +
    "\010\022\017\ufff5\020\ufff5\021\ufff5\001\002\000\020\002" +
    "\uffff\004\uffff\011\uffff\012\uffff\015\uffff\022\uffff\023\uffff" +
    "\001\002\000\020\002\ufffa\004\ufffa\011\ufffa\012\ufffa\015" +
    "\ufffa\022\ufffa\023\ufffa\001\002\000\014\004\030\007\025" +
    "\011\005\012\014\022\006\001\002\000\004\005\055\001" +
    "\002\000\004\005\054\001\002\000\004\005\053\001\002" +
    "\000\014\005\034\006\037\017\036\020\035\021\040\001" +
    "\002\000\004\005\033\001\002\000\034\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\011\ufff5\012\ufff5\015\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\026\ufff5\001\002\000\004" +
    "\005\032\001\002\000\020\002\uffe7\004\uffe7\011\uffe7\012" +
    "\uffe7\015\uffe7\022\uffe7\023\uffe7\001\002\000\020\002\uffe5" +
    "\004\uffe5\011\uffe5\012\uffe5\015\uffe5\022\uffe5\023\uffe5\001" +
    "\002\000\020\002\uffea\004\uffea\011\uffea\012\uffea\015\uffea" +
    "\022\uffea\023\uffea\001\002\000\012\004\030\011\005\012" +
    "\014\022\006\001\002\000\012\004\030\011\005\012\014" +
    "\022\006\001\002\000\012\004\030\011\005\012\014\022" +
    "\006\001\002\000\012\004\030\011\005\012\014\022\006" +
    "\001\002\000\030\002\uffed\004\uffed\005\uffed\006\037\011" +
    "\uffed\012\uffed\015\uffed\021\040\022\uffed\023\uffed\026\uffed" +
    "\001\002\000\024\002\uffeb\004\uffeb\005\uffeb\011\uffeb\012" +
    "\uffeb\015\uffeb\022\uffeb\023\uffeb\026\uffeb\001\002\000\024" +
    "\002\uffec\004\uffec\005\uffec\011\uffec\012\uffec\015\uffec\022" +
    "\uffec\023\uffec\026\uffec\001\002\000\024\002\ufff4\004\ufff4" +
    "\005\ufff4\011\ufff4\012\ufff4\015\ufff4\022\ufff4\023\ufff4\026" +
    "\ufff4\001\002\000\024\002\uffef\004\uffef\005\uffef\011\uffef" +
    "\012\uffef\015\uffef\022\uffef\023\uffef\026\uffef\001\002\000" +
    "\030\002\ufff0\004\ufff0\005\ufff0\006\037\011\ufff0\012\ufff0" +
    "\015\ufff0\017\036\022\ufff0\023\ufff0\026\ufff0\001\002\000" +
    "\024\002\uffee\004\uffee\005\uffee\011\uffee\012\uffee\015\uffee" +
    "\022\uffee\023\uffee\026\uffee\001\002\000\030\002\ufff3\004" +
    "\ufff3\005\ufff3\006\037\011\ufff3\012\ufff3\015\ufff3\020\035" +
    "\022\ufff3\023\ufff3\026\ufff3\001\002\000\024\002\ufff2\004" +
    "\ufff2\005\ufff2\011\ufff2\012\ufff2\015\ufff2\022\ufff2\023\ufff2" +
    "\026\ufff2\001\002\000\024\002\ufff1\004\ufff1\005\ufff1\011" +
    "\ufff1\012\ufff1\015\ufff1\022\ufff1\023\ufff1\026\ufff1\001\002" +
    "\000\020\002\uffe9\004\uffe9\011\uffe9\012\uffe9\015\uffe9\022" +
    "\uffe9\023\uffe9\001\002\000\020\002\uffe6\004\uffe6\011\uffe6" +
    "\012\uffe6\015\uffe6\022\uffe6\023\uffe6\001\002\000\020\002" +
    "\uffe8\004\uffe8\011\uffe8\012\uffe8\015\uffe8\022\uffe8\023\uffe8" +
    "\001\002\000\004\002\001\001\002\000\020\002\000\004" +
    "\000\011\000\012\000\015\000\022\000\023\000\001\002" +
    "\000\012\004\030\011\005\012\014\022\006\001\002\000" +
    "\004\026\077\001\002\000\010\017\036\020\035\021\040" +
    "\001\002\000\004\026\072\001\002\000\004\026\065\001" +
    "\002\000\004\024\066\001\002\000\014\004\017\011\005" +
    "\012\014\015\007\022\006\001\002\000\016\004\017\011" +
    "\005\012\014\015\007\022\006\023\070\001\002\000\004" +
    "\005\071\001\002\000\020\002\uffe2\004\uffe2\011\uffe2\012" +
    "\uffe2\015\uffe2\022\uffe2\023\uffe2\001\002\000\004\024\073" +
    "\001\002\000\014\004\017\011\005\012\014\015\007\022" +
    "\006\001\002\000\016\004\017\011\005\012\014\015\007" +
    "\022\006\023\075\001\002\000\004\005\076\001\002\000" +
    "\020\002\uffe4\004\uffe4\011\uffe4\012\uffe4\015\uffe4\022\uffe4" +
    "\023\uffe4\001\002\000\004\024\100\001\002\000\014\004" +
    "\017\011\005\012\014\015\007\022\006\001\002\000\016" +
    "\004\017\011\005\012\014\015\007\022\006\023\102\001" +
    "\002\000\004\005\103\001\002\000\020\002\uffe3\004\uffe3" +
    "\011\uffe3\012\uffe3\015\uffe3\022\uffe3\023\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\024\002\020\003\010\004\003\005\011\006" +
    "\015\007\007\011\012\013\014\014\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\020\003" +
    "\010\004\003\005\011\006\015\007\007\011\012\014\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\025\004\022\005\026" +
    "\006\030\007\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\047\004\051" +
    "\005\050\001\001\000\010\003\045\004\046\006\044\001" +
    "\001\000\004\003\043\001\001\000\010\003\040\004\041" +
    "\007\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\061\005\062\006\060\007\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\020\003\010\004\003" +
    "\005\011\006\015\007\007\011\012\013\066\014\017\001" +
    "\001\000\022\002\020\003\010\004\003\005\011\006\015" +
    "\007\007\011\012\014\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\020\003\010" +
    "\004\003\005\011\006\015\007\007\011\012\013\073\014" +
    "\017\001\001\000\022\002\020\003\010\004\003\005\011" +
    "\006\015\007\007\011\012\014\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\020" +
    "\003\010\004\003\005\011\006\015\007\007\011\012\013" +
    "\100\014\017\001\001\000\022\002\020\003\010\004\003" +
    "\005\011\006\015\007\007\011\012\014\056\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);       
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucao_decisao ::= SELECTION PARAMETERS operacao_relacional PARAMETERS LEFT_BRACKET statements RIGHT_BRACKET ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_decisao",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucao_decisao ::= SELECTION PARAMETERS operacao_logica PARAMETERS LEFT_BRACKET statements RIGHT_BRACKET ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_decisao",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucao_decisao ::= SELECTION PARAMETERS operacao_aritmetica PARAMETERS LEFT_BRACKET statements RIGHT_BRACKET ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_decisao",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atribuicao ::= ID ASSIGNMENT operacao_aritmetica ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atribuicao ::= ID ASSIGNMENT operacao_relacional ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atribuicao ::= ID ASSIGNMENT operacao_logica ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atribuicao ::= ID ASSIGNMENT potencia ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atribuicao ::= ID ASSIGNMENT STRINGS ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atribuicao ::= ID ASSIGNMENT valor ENDING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacao_relacional ::= valor OP_RELACIONAL potencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacao_relacional ::= valor OP_RELACIONAL operacao_relacional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacao_relacional ::= valor OP_RELACIONAL valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacao_logica ::= valor OP_LOGICO potencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_logica",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacao_logica ::= valor OP_LOGICO operacao_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_logica",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacao_logica ::= valor OP_LOGICO valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_logica",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacao_aritmetica ::= valor OP_ARITMETICO potencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacao_aritmetica ::= valor OP_ARITMETICO operacao_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacao_aritmetica ::= valor OP_ARITMETICO valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // potencia ::= valor EXPOENT valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("potencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= instrucao_decisao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= operacao_relacional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= operacao_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= operacao_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= potencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

